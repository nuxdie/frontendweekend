version: 2
jobs:
  eslint:
    docker:
    - image: circleci/node:11
    working_directory: ~/repo
    steps:
    - checkout
    - restore_cache:
        name: Restore node_modules cache
        keys:
        - yarn-cypress-cache-{{ checksum "yarn.lock" }}
    - run:
        name: Install node modules
        command: yarn --frozen-lockfile
    - save_cache:
        name: Save node modules cache
        key: yarn-cypress-cache-{{ checksum "yarn.lock" }}
        paths:
        - ~/.cache
    - run:
        name: JavaScript Linter
        command: yarn eslint-junit
    - store_test_results:
        path: reports/junit
    - store_artifacts:
        path: reports/junit
  wait-for-netlify-build:
    docker:
    - image: circleci/node:11
    working_directory: ~/repo
    steps:
    - checkout
    - restore_cache:
        name: Restore node_modules cache
        keys:
        - yarn-cypress-cache-{{ checksum "yarn.lock" }}
    - run:
        name: Install node modules
        command: yarn --frozen-lockfile
    - save_cache:
        name: Save node modules cache
        key: yarn-cypress-cache-{{ checksum "yarn.lock" }}
        paths:
        - ~/.cache
    - run:
        command: ./wait-for-netlify-build.sh
  sc-import:
    docker:
    - image: circleci/node:11
    working_directory: ~/repo
    steps:
    - checkout
    - restore_cache:
        name: Restore node_modules cache
        keys:
        - yarn-cypress-cache-{{ checksum "yarn.lock" }}
    - run:
        name: Install node modules
        command: yarn --frozen-lockfile
    - save_cache:
        name: Save node modules cache
        key: yarn-cypress-cache-{{ checksum "yarn.lock" }}
        paths:
        - ~/.cache
    - run:
        command: yarn sc-import
    - run:
        command: yarn remark-lint-md-fix
    - run:
        command: yarn prettier-md-fix
    - run:
        command: yarn sc-comment-import
    - persist_to_workspace:
        root: content
        paths:
        - '*'
  commit-to-master:
    docker:
    - image: circleci/node:11
    working_directory: ~/repo
    steps:
    - checkout
    - restore_cache:
        name: Restore node_modules cache
        keys:
        - yarn-cypress-cache-{{ checksum "yarn.lock" }}
    - run:
        name: Install node modules
        command: yarn --frozen-lockfile
    - save_cache:
        name: Save node modules cache
        key: yarn-cypress-cache-{{ checksum "yarn.lock" }}
        paths:
        - ~/.cache
    - attach_workspace:
        at: content
    - run:
        command: ./commit-to-master.sh
  test-lh:
    docker:
    - image: circleci/node:11-browsers
    working_directory: ~/repo
    steps:
    - checkout
    - restore_cache:
        name: Restore node_modules cache
        keys:
        - yarn-cypress-cache-{{ checksum "yarn.lock" }}
    - run:
        name: Install node modules
        command: yarn --frozen-lockfile
    - save_cache:
        name: Save node modules cache
        key: yarn-cypress-cache-{{ checksum "yarn.lock" }}
        paths:
        - ~/.cache
    - run:
        command: yarn test-lh
    - store_test_results:
        path: results
  build:
    docker:
    - image: circleci/node:11
    working_directory: ~/repo
    steps:
    - checkout
    - restore_cache:
        name: Restore node_modules cache
        keys:
        - yarn-cypress-cache-{{ checksum "yarn.lock" }}
    - run:
        name: Install node modules
        command: yarn --frozen-lockfile
    - save_cache:
        name: Save node modules cache
        key: yarn-cypress-cache-{{ checksum "yarn.lock" }}
        paths:
        - ~/.cache
    - attach_workspace:
        at: content
    - run:
        command: yarn gatsby-build
    - persist_to_workspace:
        root: public
        paths:
        - '*'
  sonarqube-code-analyze:
    docker:
    - image: djdapz/openjdk-node-cf:latest
    steps:
    - checkout
    - run:
        command: ./analyze-sonarqube.sh
  test-e2e:
    docker:
    - image: cypress/base:8
      environment:
        TERM: xterm
    working_directory: ~/app
    steps:
    - checkout
    - restore_cache:
        name: Restore node_modules cache
        keys:
        - yarn-cypress-cache-{{ checksum "yarn.lock" }}
    - run:
        name: Install node modules
        command: yarn --frozen-lockfile
    - save_cache:
        name: Save node modules cache
        key: yarn-cypress-cache-{{ checksum "yarn.lock" }}
        paths:
        - ~/.cache
    - attach_workspace:
        at: public
    - run:
        command: yarn run e2e-test
    - store_test_results:
        path: results
    - store_artifacts:
        path: cypress/videos
    - store_artifacts:
        path: cypress/screenshots
  test:
    docker:
    - image: circleci/node:11
    working_directory: ~/repo
    steps:
    - checkout
    - restore_cache:
        name: Restore node_modules cache
        keys:
        - yarn-cypress-cache-{{ checksum "yarn.lock" }}
    - run:
        name: Install node modules
        command: yarn --frozen-lockfile
    - save_cache:
        name: Save node modules cache
        key: yarn-cypress-cache-{{ checksum "yarn.lock" }}
        paths:
        - ~/.cache
    - run:
        command: yarn test
workflows:
  version: 2
  build-and-test:
    jobs:
    - sc-import
    - build:
        requires:
        - sc-import
    - eslint
    - test
    - sonarqube-code-analyze
    - wait-for-netlify-build
    - test-e2e:
        requires:
        - build
    - test-lh:
        requires:
        - wait-for-netlify-build
  import-sc-and-publish-hourly:
    triggers:
    - schedule:
        cron: 0 * * * *
        filters:
          branches:
            only:
            - master
    jobs:
    - sc-import
    - commit-to-master:
        requires:
        - sc-import

# Original config.yml file:
# version: 2.1
# 
# executors:
#   node:
#     docker:
#       - image: circleci/node:11
#     working_directory: ~/repo
# 
# aliases:
#   restore_cache: &restore_cache
#     restore_cache:
#       name: Restore node_modules cache
#       keys:
#         - yarn-cypress-cache-{{ checksum \"yarn.lock\" }}
# 
#   install_node_modules: &install_node_modules
#     run:
#       name: Install node modules
#       command: yarn --frozen-lockfile
# 
#   persist_cache: &persist_cache
#     save_cache:
#       name: Save node modules cache
#       key: yarn-cypress-cache-{{ checksum \"yarn.lock\" }}
#       paths:
#         - ~/.cache
# 
#   attach_to_build: &attach_to_build
#     attach_workspace:
#       at: public
# 
#   attach_to_content: &attach_to_content
#     attach_workspace:
#       at: content
# 
# jobs:
# 
#   sc-import:
#     executor: node
#     steps:
#       - checkout
#       - <<: *restore_cache
#       - <<: *install_node_modules
#       - <<: *persist_cache
#       - run: yarn sc-import
#       - run: yarn remark-lint-md-fix
#       - run: yarn prettier-md-fix
#       - run: yarn sc-comment-import
#       - persist_to_workspace:
#           root: content
#           paths:
#             - \"*\"
# 
#   build:
#     executor: node
#     steps:
#       - checkout
#       - <<: *restore_cache
#       - <<: *install_node_modules
#       - <<: *persist_cache
#       - <<: *attach_to_content
#       - run: yarn gatsby-build
#       - persist_to_workspace:
#           root: public
#           paths:
#             - \"*\"
# 
#   test:
#     executor: node
#     steps:
#       - checkout
#       - <<: *restore_cache
#       - <<: *install_node_modules
#       - <<: *persist_cache
#       - run: yarn test
# 
#   eslint:
#     executor: node
#     steps:
#       - checkout
#       - <<: *restore_cache
#       - <<: *install_node_modules
#       - <<: *persist_cache
#       - run:
#           name: \"JavaScript Linter\"
#           command: yarn eslint-junit
#       - store_test_results:
#           path: reports/junit
#       - store_artifacts:
#           path: reports/junit
# 
#   test-e2e:
#     docker:
#       - image: cypress/base:8
#         environment:
#           ## this enables colors in the output
#           TERM: xterm
#     working_directory: ~/app
#     steps:
#       - checkout
#       - <<: *restore_cache
#       - <<: *install_node_modules
#       - <<: *persist_cache
#       - <<: *attach_to_build
#       - run:
#           command: yarn run e2e-test
#       - store_test_results:
#           path: results
#       - store_artifacts:
#           path: cypress/videos
#       - store_artifacts:
#           path: cypress/screenshots
# 
#   deploy:
#     executor: node
#     steps:
#       - checkout
#       - <<: *restore_cache
#       - <<: *install_node_modules
#       - <<: *persist_cache
#       - <<: *attach_to_build
#       - run: yarn deploy
# 
#   deploy-stage:
#     executor: node
#     steps:
#       - checkout
#       - <<: *restore_cache
#       - <<: *install_node_modules
#       - <<: *persist_cache
#       - <<: *attach_to_build
#       - run: yarn deploy-stage
# 
#   test-lh:
#     docker:
#       - image: circleci/node:11-browsers
#     working_directory: ~/repo
#     steps:
#       - checkout
#       - <<: *restore_cache
#       - <<: *install_node_modules
#       - <<: *persist_cache
#       - run: yarn test-lh
#       - store_test_results:
#           path: results
# 
#   commit-to-master:
#     executor: node
#     steps:
#       - checkout
#       - <<: *restore_cache
#       - <<: *install_node_modules
#       - <<: *persist_cache
#       - <<: *attach_to_content
#       - run: ./commit-to-master.sh
# 
#   wait-for-netlify-build:
#     executor: node
#     steps:
#       - checkout
#       - <<: *restore_cache
#       - <<: *install_node_modules
#       - <<: *persist_cache
#       - run: ./wait-for-netlify-build.sh
# 
#   sonarqube-code-analyze:
#     docker:
#       - image: djdapz/openjdk-node-cf:latest
#     steps:
#       - checkout
#       - run: ./analyze-sonarqube.sh
# 
# workflows:
#   version: 2
# 
#   build-and-test:
#     jobs:
#       - sc-import
#       - build:
#           requires:
#             - sc-import
#       - eslint
#       - test
#       - sonarqube-code-analyze
#       - wait-for-netlify-build
#       - test-e2e:
#           requires:
#             - build
#       - test-lh:
#           requires:
#             - wait-for-netlify-build
# 
#   import-sc-and-publish-hourly:
#     triggers:
#       - schedule:
#           cron: \"0 * * * *\"
#           filters:
#             branches:
#               only:
#                 - master
#     jobs:
#       - sc-import
#       - commit-to-master:
#           requires:
#             - sc-import